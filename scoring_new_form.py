# -*- coding: utf-8 -*-
"""Scoring new form.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ksoigyayCq5usiqy3haapLxxMvIJAvMp

##Pengelompokan/Prediksi Calon Penerima Beasiswa untuk Management *Schollarships*

# Studi Kasus 1

## Import Libraries and Data
"""

# import package
import os
import pandas as pd
import numpy as np
import zipfile
import tensorflow as tf
import tensorflow_hub as hub
import json

# Package untuk visualisasi
import matplotlib.pyplot as plt

# Install custom OCR language

"""# Classify house
House will be classified into 2 classes, "cocok" or "tidak cocok" (context: in receivinig the scholarship).

## Load House Classification model
"""


# Extract the archive
zip_ref = zipfile.ZipFile(('second_model.zip'), 'r')
zip_ref.extractall("tmp/")
zip_ref.close()

new_model = tf.keras.models.load_model('tmp/')

# Check its architecture
new_model.summary()

"""## Function to download image from url

Image will be downloaded and loaded using keras preprocessing
"""

import requests
from keras.preprocessing import image as keras_image

def url_to_image(image_url):
  # Check if image_url is valid
  if not image_url.startswith('http'):
    return 404
  
  # Get image from url
  img_data = requests.get(image_url).content

  # Write downloaded file into disk
  with open('predict_img_temp.jpg', 'wb') as handler:
      handler.write(img_data)

  try:
    # Load image into variable
    img=keras_image.load_img('predict_img_temp.jpg', target_size=(224, 224))
    return img
    
  except (IOError, SyntaxError) as e:
    # This will catch if file downloaded is not image
    print('Bad file: ' + str(image_url))
    return 69

"""Function to classify house image"""

import requests

def determine_house_score(image_url):
  # Get image from url
  image = url_to_image(image_url)

  # Catch error code
  if image in [404, 69]:
    return image

  # Prepare data to feed into model
  x = keras_image.img_to_array(image)
  x /= 255
  x=np.expand_dims(x, axis=0)
  images = np.vstack([x])

  # Do prediction
  classes = new_model.predict(images, batch_size=10)

  if classes[0]>0.5:
    return 1
  else:
    return 0

"""# OCR NIK

Get image from url
"""

import requests

def url_to_PILImage(image_url):
  # Check if image_url is valid
  if not image_url.startswith('http'):
    return 404
  
  # Get image from url
  img_data = requests.get(image_url).content

  # Write downloaded file into disk
  with open('ocr_img_temp.jpg', 'wb') as handler:
      handler.write(img_data)

  try:
    # Load image into variable
    #img = Image.open('ocr_img_temp.jpg')
    #return img
    img=keras_image.load_img('ocr_img_temp.jpg')
    return img
    
  except (IOError, SyntaxError) as e:
    # This will catch if file downloaded is not image
    print('Bad file: ' + str(image_url))
    return 69

"""Code for OCR"""

import re
import pytesseract
from PIL import Image

def crop_nik(img):
  # Get image size
  width, height = img.size

  # Take only 1/3 of image's height
  bottom = height/3

  return img.crop((0,0,width,bottom))

def ktp_to_nik(image_url):

  # Get image from URL
  img = url_to_PILImage(image_url)

  # Catch image error code
  if img in [404, 69]:
    return "NIK Not Found"

  # Crop image for better result
  image_crop = crop_nik(img)
  
  # Get OCR
  pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
  result = pytesseract.image_to_string(image_crop, lang="NIK")
  
  # Filter result into 16 digit (NIK)
  find = re.search(r'\d{16}', result)
  # If NIK found, return NIK
  if find!=None:
    return find.group(0)
  return "NIK Not Found"

"""# Data Preprocessing

Menyatukan Dataset aplikan dengan dataframe hasil prediksi rumah
"""

# frames=[ds,dp]

"""#Scoring Process

Menghitung jumlah kata dari setiap cerita dan dimasukan ke dataframe baru
"""

"""Membuat dataframe baru untuk menampung detail scoring aplikan"""

# Dataframe to put all scoring detail
score = pd.DataFrame()

"""FUNCTION PROSES SCORING (TEMPORARY)"""

def scoring_process(data):
  # Dictionary kosong untuk menampung output
  score = {}
  total = 0

  # Cek Provinsi tertinggal
  provinsi_kurang = ['papua', 'papua barat', 'maluku', 'nusa tenggara barat', 'sumatera utara']
  score['scoreProvinsi'] = 50 if data['Provinsi'].lower() in provinsi_kurang else 10
  total += score['scoreProvinsi']

  # Cek Kabupaten tertinggal
  kabupaten_kurang = ['nias', 'nias selatan', 'nias utara', 'nias barat', 'kepulauan mentawai', 'musi rawas utara',
                    'pesisir barat', 'lombok utara', 'sumba barat', 'sumba timur', 'kupang', 'timor tengah selatan',
                    'belu', 'alor', 'lembata', 'rote ndao', 'sumba tengah', 'sumba barat daya', 'manggarai timur', 
                    'sabu raijua', 'malaka', 'donggala', 'tojo una-una', 'sigi', 'maluku tenggara barat', 'kepulauan aru',
                    'seram bagian barat', 'seram bagian timur', 'maluku barat daya', 'buru selatan', 'kepulauan sula', 'pulau talibau',
                    'teluk wondama', 'teluk bintuni', 'sorong selatan', 'sorong', 'tambrauw', 'maybrat', 'manokwari selatan',
                    'pegunungan arfak', 'jayawijaya', 'nabire', 'paniai', 'puncak jaya', 'boven digoel', 'mappi', 'asmat', 'yahukimo',
                    'pegunungan bintang', 'tolikara', 'keerom', 'waropen', 'supiori', 'mamberamo raya', 'nduga', 'lanny jaya',
                    'mamberamo tengah', 'yalimo', 'puncak', 'dogiyai', 'intan jaya', 'daiyai']
  score['scoreKota'] = 100 if data['Kota/Kabupaten'].lower() in kabupaten_kurang else 10
  total += score['scoreKota']

  # Cek MEDSOS
  score['scoreMedsos'] = 10 if data['Medsos'] != '' else 0
  total += score['scoreMedsos']

  # Cek Status Rumah
  score['scoreKepemilikanRumah'] = 50 if data['Status Rumah'].lower() == 'kontrak' else 10
  total += score['scoreKepemilikanRumah']

  # Cek NIK pake OCR
  if str(data['NIK']) == str(ktp_to_nik(data['Foto KTP'])):
    score['scoreNIK'] = 50
    score['statusData'] = 'valid'
  else:
    score['scoreNIK'] = 10
    score['statusData'] = 'invalid'
  total += score['scoreNIK']

  # Cek Rumah
  val = determine_house_score(data['Foto Rumah'])
  if val == 1:
    score['scoreRumah'] = 100
    score['statusRumah'] = 'valid'
  else:
    score['scoreRumah'] = 10
    score['statusRumah'] = 'invalid'
  total += score['scoreRumah']

  # Cek jumlah kata Cerita Penggunaan Dana
  counter = data['Cerita Penggunaan Dana'].count(' ') + 1
  score['scoreDana'] = 50 if counter > 100 else 10
  total += score['scoreDana']

  # Cek jumlah kata Cerita Latar Belakang
  counter = data['Cerita Latar Belakang'].count(' ') + 1
  score['scoreLatarBelakang'] = 50 if counter > 100 else 10
  total += score['scoreLatarBelakang']

  # Cek jumlah kata Cerita Perjuangan
  counter = data['Cerita Perjuangan'].count(' ') + 1
  score['scorePerjuangan'] = 50 if counter > 100 else 10
  total += score['scorePerjuangan']

  # Cek jumlah kata Pentingnya Beasiswa
  counter = data['Beasiswa Penting'].count(' ') + 1
  score['scorePenting'] = 50 if counter > 100 else 10
  total += score['scorePenting']

  # Cek jumlah kata Cerita Kegiatan
  counter = data['Cerita Kegiatan'].count(' ') + 1
  score['scoreKegiatan'] = 50 if counter > 100 else 10
  total += score['scoreKegiatan']

  score['total'] = total

  return json.dumps(score)